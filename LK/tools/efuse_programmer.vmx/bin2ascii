#! /usr/bin/perl -w
if( $#ARGV != -1 )
{
	foreach $arg (@ARGV) {
		($type, $file) = split(/=/, $arg);
		if ($type eq "rsa_pub_key") {
			$rsa_pub_key = $file;
		} elsif ($type eq "rsa_pub_fw_key") {
			$rsa_pub_fw_key = $file;
		} elsif ($type eq "rsa_pub_tee_key") {
			$rsa_pub_tee_key = $file;
		} elsif ($type eq "vm_adv_rsa_pub_key") {
			$vm_adv_rsa_pub_key = $file;
		} elsif ($type eq "aes_key") {
			$aes_key = $file;
		} elsif ($type eq "aes_key1") {
			$aes_key1 = $file;
		} elsif ($type eq "aes_key2") {
			$aes_key2 = $file;
		} elsif ($type eq "aes_key3") {
			$aes_key3 = $file;
		} elsif ($type eq "aes_seed") {
			$aes_seed = $file;
		} elsif ($type eq "cust_data") {
			$cust_data = $file;
		} elsif ($type eq "chip_id") {
			$chip_id= $file;
		} elsif ($type eq "jtag_pwd") {
			$jtag_pwd= $file;
		} elsif ($type eq "add_data1") {
			$add_data1= $file;
		} elsif ($type eq "add_data2") {
			$add_data2= $file;
		} elsif ($type eq "add_data3") {
			$add_data3= $file;
		} elsif ($type eq "add_data4") {
			$add_data4= $file;
		} elsif ($type eq "market_id") {
			$market_id= $file;
		} elsif ($type eq "enc_root_key") {
			$enc_root_key= $file;
		} elsif ($type eq "vm_adv_rsa_pub_final") {
			$vm_adv_rsa_pub_final = $file;
		} elsif ($type eq "key_count") {
			$key_count= $file;
		} 
	}

    open BINARY, $rsa_pub_key or die $!;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"

    my $bytes;
    $current = 0;
    $size = -s BINARY;
    ($size>>=2); # word number -1
    print ".data\n.globl rsa_pub_key\n.globl rsa_pub_key_end\nrsa_pub_key:\n.word \\\n";
    while ($current < $size)
    {
        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
        
        #need not inverse, if we use SCPU(ARM) write data to EFUSE, and use Rbus read it, both ACPU & SCPU will see little endian value
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;

        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
    }
    print "\nrsa_pub_key_end:\n.word 0\n";

    open BINARY, $rsa_pub_fw_key or die $!;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


    my $fw_bytes;
    $current = 0;
    $size = -s BINARY;
    ($size>>=2); # word number -1
    print ".data\n.globl rsa_pub_fw_key\n.globl rsa_pub_fw_key_end\nrsa_pub_fw_key:\n.word \\\n";
    while ($current < $size)
    {
        read(BINARY, $fw_bytes, 1);
        @a = map ord, split //, $fw_bytes;
        read(BINARY, $fw_bytes, 1);
        @b = map ord, split //, $fw_bytes;
        read(BINARY, $fw_bytes, 1);
        @c = map ord, split //, $fw_bytes;
        read(BINARY, $fw_bytes, 1);
        @d = map ord, split //, $fw_bytes;
        
        #need not inverse, if we use SCPU(ARM) write data to EFUSE, and use Rbus read it, both ACPU & SCPU will see little endian value
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;

        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
    }
    print "\nrsa_pub_fw_key_end:\n.word 0\n";

    open BINARY, $rsa_pub_tee_key or die $!;

    # in the for();
    # (map ord, split //, $tee_bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


    my $tee_bytes;
    $current = 0;
    $size = -s BINARY;
    ($size>>=2); # word number -1
    print ".data\n.globl rsa_pub_tee_key\n.globl rsa_pub_tee_key_end\nrsa_pub_tee_key:\n.word \\\n";
    while ($current < $size)
    {
        read(BINARY, $tee_bytes, 1);
        @a = map ord, split //, $tee_bytes;
        read(BINARY, $tee_bytes, 1);
        @b = map ord, split //, $tee_bytes;
        read(BINARY, $tee_bytes, 1);
        @c = map ord, split //, $tee_bytes;
        read(BINARY, $tee_bytes, 1);
        @d = map ord, split //, $tee_bytes;
        
        #need not inverse, if we use SCPU(ARM) write data to EFUSE, and use Rbus read it, both ACPU & SCPU will see little endian value
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;

        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
    }
    print "\nrsa_pub_tee_key_end:\n.word 0\n";
   
    if(defined $vm_adv_rsa_pub_key)
    {
      if (-e $vm_adv_rsa_pub_key)
      {
    open BINARY, $vm_adv_rsa_pub_key or die $!;

    # in the for();
    # (map ord, split //, $tee_bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


    my $vm_adv_bytes;
    $current = 0;
    $size = -s BINARY;
    ($size>>=2); # word number -1
    print ".data\n.globl vm_adv_rsa_pub_key\n.globl vm_adv_rsa_pub_key_end\nvm_adv_rsa_pub_key:\n.word \\\n";
    while ($current < $size)
    {
        read(BINARY, $vm_adv_bytes, 1);
        @a = map ord, split //, $vm_adv_bytes;
        read(BINARY, $vm_adv_bytes, 1);
        @b = map ord, split //, $vm_adv_bytes;
        read(BINARY, $vm_adv_bytes, 1);
        @c = map ord, split //, $vm_adv_bytes;
        read(BINARY, $vm_adv_bytes, 1);
        @d = map ord, split //, $vm_adv_bytes;
        
        #need not inverse, if we use SCPU(ARM) write data to EFUSE, and use Rbus read it, both ACPU & SCPU will see little endian value
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;

        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
    }
    print "\nvm_adv_rsa_pub_key_end:\n.word 0\n";
    }
    else
    {
      print ".data\n.globl vm_adv_rsa_pub_key\n.globl vm_adv_rsa_pub_key_end\nvm_adv_rsa_pub_key:\n.word \\\n";
      print "\nvm_adv_rsa_pub_key_end:\n.word 0\n";
    }
   }

    open BINARY, $aes_key or die $!;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


    $current = 0;
    $size = -s BINARY;
    ($size>>=2); # word number -1
    print ".data\n.globl aes_key\n.globl aes_key_end\naes_key:\n.word \\\n";
    while ($current < $size)
    {
#        read(BINARY, $bytes, 4);
#        @a = map ord, split //, $bytes;
#        printf "0x%02x%02x%02x%02x", @a;

        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
        
        #printf "0x%02x", @a;
        #printf "%02x", @b;
        #printf "%02x", @c;
        #printf "%02x", @d;

        #need inverse, if we use SCPU(ARM) write data to EFUSE, for CP read it
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;
       
        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
    }
    print "\naes_key_end:\n.word 0\n";
    
    
    open BINARY, $aes_key1 or die $!;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


    $current = 0;
    $size = -s BINARY;
    ($size>>=2); # word number -1
    print ".data\n.globl aes_key1\n.globl aes_key1_end\naes_key1:\n.word \\\n";
    while ($current < $size)
    {
#        read(BINARY, $bytes, 4);
#        @a = map ord, split //, $bytes;
#        printf "0x%02x%02x%02x%02x", @a;

        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
        
        #printf "0x%02x", @a;
        #printf "%02x", @b;
        #printf "%02x", @c;
        #printf "%02x", @d;

        #need inverse, if we use SCPU(ARM) write data to EFUSE, for CP read it
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;
       
        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
    }
    print "\naes_key1_end:\n.word 0\n";
    
    open BINARY, $aes_key2 or die $!;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


    $current = 0;
    $size = -s BINARY;
    ($size>>=2); # word number -1
    print ".data\n.globl aes_key2\n.globl aes_key2_end\naes_key2:\n.word \\\n";
    while ($current < $size)
    {
#        read(BINARY, $bytes, 4);
#        @a = map ord, split //, $bytes;
#        printf "0x%02x%02x%02x%02x", @a;

        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
        
        #printf "0x%02x", @a;
        #printf "%02x", @b;
        #printf "%02x", @c;
        #printf "%02x", @d;

        #need inverse, if we use SCPU(ARM) write data to EFUSE, for CP read it
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;
       
        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
    }
    print "\naes_key2_end:\n.word 0\n";

    open BINARY, $aes_key3 or die $!;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


    $current = 0;
    $size = -s BINARY;
    ($size>>=2); # word number -1
    print ".data\n.globl aes_key3\n.globl aes_key3_end\naes_key3:\n.word \\\n";
    while ($current < $size)
    {
#        read(BINARY, $bytes, 4);
#        @a = map ord, split //, $bytes;
#        printf "0x%02x%02x%02x%02x", @a;

        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
        
        #printf "0x%02x", @a;
        #printf "%02x", @b;
        #printf "%02x", @c;
        #printf "%02x", @d;

        #need inverse, if we use SCPU(ARM) write data to EFUSE, for CP read it
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;
       
        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
    }
    print "\naes_key3_end:\n.word 0\n";


    open BINARY, $aes_seed or die $!;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


    $current = 0;
    $size = -s BINARY;
    ($size>>=2); # word number -1
    print ".data\n.globl aes_seed\n.globl aes_seed_end\naes_seed:\n.word \\\n";
    while ($current < $size)
    {
#        read(BINARY, $bytes, 4);
#        @a = map ord, split //, $bytes;
#        printf "0x%02x%02x%02x%02x", @a;

        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
        
        #printf "0x%02x", @a;
        #printf "%02x", @b;
        #printf "%02x", @c;
        #printf "%02x", @d;

        #need inverse, if we use SCPU(ARM) write data to EFUSE, for CP read it
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;
       
        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
    }
    print "\naes_seed_end:\n.word 0\n";

    if(defined $cust_data)
    {
      if (-e $cust_data)
      {
      open BINARY, $cust_data ;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


      $current = 0;
      $size = -s BINARY;
      ($size>>=2); # word number -1
      print ".data\n.globl cust_data\n.globl cust_data_end\ncust_data:\n.word \\\n";
      while ($current < $size)
      {
#        read(BINARY, $bytes, 4);
#        @a = map ord, split //, $bytes;
#        printf "0x%02x%02x%02x%02x", @a;

        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
        
        #printf "0x%02x", @a;
        #printf "%02x", @b;
        #printf "%02x", @c;
        #printf "%02x", @d;

        #need inverse, if we use SCPU(ARM) write data to EFUSE, for CP read it
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;
       
        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
      }
      print "\ncust_data_end:\n.word 0\n";
    }
    else
    {
      print ".data\n.globl cust_data\n.globl cust_data_end\ncust_data:\n.word \\\n";
      print "\ncust_data_end:\n.word 0\n";
    }
   }

    if(defined $chip_id)
    {
      if (-e $chip_id)
      {
      open BINARY, $chip_id;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


      $current = 0;
      $size = -s BINARY;
      ($size>>=2); # word number -1
      print ".data\n.globl chip_id\n.globl chip_id_end\nchip_id:\n.word \\\n";
      while ($current < $size)
      {
#        read(BINARY, $bytes, 4);
#        @a = map ord, split //, $bytes;
#        printf "0x%02x%02x%02x%02x", @a;

        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
        
        #printf "0x%02x", @a;
        #printf "%02x", @b;
        #printf "%02x", @c;
        #printf "%02x", @d;

        #need inverse, if we use SCPU(ARM) write data to EFUSE, for CP read it
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;
       
        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
      }
      print "\nchip_id_end:\n.word 0\n";
    }
    else
    {
      print ".data\n.globl chip_id\n.globl chip_id_end\nchip_id:\n.word \\\n";
      print "\nchip_id_end:\n.word 0\n";
    }
   }

    if(defined $jtag_pwd)
    {
      if (-e $jtag_pwd)
      {
      open BINARY, $jtag_pwd ;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


      $current = 0;
      $size = -s BINARY;
      ($size>>=2); # word number -1
      print ".data\n.globl jtag_pwd\n.globl jtag_pwd_end\njtag_pwd:\n.word \\\n";
      while ($current < $size)
      {
#        read(BINARY, $bytes, 4);
#        @a = map ord, split //, $bytes;
#        printf "0x%02x%02x%02x%02x", @a;

        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
        
        #printf "0x%02x", @a;
        #printf "%02x", @b;
        #printf "%02x", @c;
        #printf "%02x", @d;

        #need inverse, if we use SCPU(ARM) write data to EFUSE, for CP read it
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;
       
        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
      }
      print "\njtag_pwd_end:\n.word 0\n";
    }
    else
    {
      print ".data\n.globl jtag_pwd\n.globl jtag_pwd_end\njtag_pwd:\n.word \\\n";
      print "\njtag_pwd_end:\n.word 0\n";
    }
   }

    if(defined $add_data1)
    {
      if (-e $add_data1)
      {
      open BINARY, $add_data1 ;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


      $current = 0;
      $size = -s BINARY;
      ($size>>=2); # word number -1
      print ".data\n.globl add_data1\n.globl add_data1_end\nadd_data1:\n.word \\\n";
      while ($current < $size)
      {
#        read(BINARY, $bytes, 4);
#        @a = map ord, split //, $bytes;
#        printf "0x%02x%02x%02x%02x", @a;

        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
        
        #printf "0x%02x", @a;
        #printf "%02x", @b;
        #printf "%02x", @c;
        #printf "%02x", @d;

        #need inverse, if we use SCPU(ARM) write data to EFUSE, for CP read it
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;
       
        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
      }
      print "\nadd_data1_end:\n.word 0\n";
    }
    else
    {
      print ".data\n.globl add_data1\n.globl add_data1_end\nadd_data1:\n.word \\\n";
      print "\nadd_data1_end:\n.word 0\n";
    }
   }

    if(defined $add_data2)
    {
      if (-e $add_data2)
      {
      open BINARY, $add_data2 ;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


      $current = 0;
      $size = -s BINARY;
      ($size>>=2); # word number -1
      print ".data\n.globl add_data2\n.globl add_data2_end\nadd_data2:\n.word \\\n";
      while ($current < $size)
      {
#        read(BINARY, $bytes, 4);
#        @a = map ord, split //, $bytes;
#        printf "0x%02x%02x%02x%02x", @a;

        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
        
        #printf "0x%02x", @a;
        #printf "%02x", @b;
        #printf "%02x", @c;
        #printf "%02x", @d;

        #need inverse, if we use SCPU(ARM) write data to EFUSE, for CP read it
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;
       
        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
      }
      print "\nadd_data2_end:\n.word 0\n";
    }
    else
    {
      print ".data\n.globl add_data2\n.globl add_data2_end\nadd_data2:\n.word \\\n";
      print "\nadd_data2_end:\n.word 0\n";
    }
   }

    if(defined $add_data3)
    {
      if (-e $add_data3)
      {
      open BINARY, $add_data3 ;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


      $current = 0;
      $size = -s BINARY;
      ($size>>=2); # word number -1
      print ".data\n.globl add_data3\n.globl add_data3_end\nadd_data3:\n.word \\\n";
      while ($current < $size)
      {
#        read(BINARY, $bytes, 4);
#        @a = map ord, split //, $bytes;
#        printf "0x%02x%02x%02x%02x", @a;

        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
        
        #printf "0x%02x", @a;
        #printf "%02x", @b;
        #printf "%02x", @c;
        #printf "%02x", @d;

        #need inverse, if we use SCPU(ARM) write data to EFUSE, for CP read it
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;
       
        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
      }
      print "\nadd_data3_end:\n.word 0\n";
    }
    else
    {
      print ".data\n.globl add_data3\n.globl add_data3_end\nadd_data3:\n.word \\\n";
      print "\nadd_data3_end:\n.word 0\n";
    }
   }

    if(defined $add_data4)
    {
      if (-e $add_data4)
      {
      open BINARY, $add_data4 ;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


      $current = 0;
      $size = -s BINARY;
      ($size>>=2); # word number -1
      print ".data\n.globl add_data4\n.globl add_data4_end\nadd_data4:\n.word \\\n";
      while ($current < $size)
      {
#        read(BINARY, $bytes, 4);
#        @a = map ord, split //, $bytes;
#        printf "0x%02x%02x%02x%02x", @a;

        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
        
        #printf "0x%02x", @a;
        #printf "%02x", @b;
        #printf "%02x", @c;
        #printf "%02x", @d;

        #need inverse, if we use SCPU(ARM) write data to EFUSE, for CP read it
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;
       
        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
      }
      print "\nadd_data4_end:\n.word 0\n";
    }
    else
    {
      print ".data\n.globl add_data4\n.globl add_data4_end\nadd_data4:\n.word \\\n";
      print "\nadd_data4_end:\n.word 0\n";
    }
   }

    if(defined $market_id)
    {
      if (-e $market_id)
      {
      open BINARY, $market_id ;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


      $current = 0;
      $size = -s BINARY;
      ($size>>=2); # word number -1
      print ".data\n.globl market_id\n.globl market_id_end\nmarket_id:\n.word \\\n";
      while ($current < $size)
      {
#        read(BINARY, $bytes, 4);
#        @a = map ord, split //, $bytes;
#        printf "0x%02x%02x%02x%02x", @a;

        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
        
        #printf "0x%02x", @a;
        #printf "%02x", @b;
        #printf "%02x", @c;
        #printf "%02x", @d;

        #need inverse, if we use SCPU(ARM) write data to EFUSE, for CP read it
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;
       
        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
      }
      print "\nmarket_id_end:\n.word 0\n";
    }
    else
    {
      print ".data\n.globl market_id\n.globl market_id_end\nmarket_id:\n.word \\\n";
      print "\nmarket_id_end:\n.word 0\n";
    }
   }

    if(defined $enc_root_key)
    {
      if (-e $enc_root_key)
      {
      open BINARY, $enc_root_key ;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


      $current = 0;
      $size = -s BINARY;
      ($size>>=2); # word number -1
      print ".data\n.globl enc_root_key\n.globl enc_root_key_end\nenc_root_key:\n.word \\\n";
      while ($current < $size)
      {
#        read(BINARY, $bytes, 4);
#        @a = map ord, split //, $bytes;
#        printf "0x%02x%02x%02x%02x", @a;

        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;

        #printf "0x%02x", @a;
        #printf "%02x", @b;
        #printf "%02x", @c;
        #printf "%02x", @d;

        #need inverse, if we use SCPU(ARM) write data to EFUSE, for CP read it
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;

        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
      }
      print "\nenc_root_key_end:\n.word 0\n";
    }
    else
    {
      print ".data\n.globl enc_root_key\n.globl enc_root_key_end\nenc_root_key:\n.word \\\n";
      print "\nenc_root_key_end:\n.word 0\n";
    }
   }

    if(defined $vm_adv_rsa_pub_final)
    {
      if (-e $vm_adv_rsa_pub_final)
      {
      open BINARY, $vm_adv_rsa_pub_final ;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


      $current = 0;
      $size = -s BINARY;
      ($size>>=2); # word number -1
      print ".data\n.globl vm_adv_rsa_pub_final\n.globl vm_adv_rsa_pub_final_end\nvm_adv_rsa_pub_final:\n.word \\\n";
      while ($current < $size)
      {
#        read(BINARY, $bytes, 4);
#        @a = map ord, split //, $bytes;
#        printf "0x%02x%02x%02x%02x", @a;

        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;

        #printf "0x%02x", @a;
        #printf "%02x", @b;
        #printf "%02x", @c;
        #printf "%02x", @d;

        #need inverse, if we use SCPU(ARM) write data to EFUSE, for CP read it
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;

        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
      }
      print "\nvm_adv_rsa_pub_final_end:\n.word 0\n";
    }
    else
    {
      print ".data\n.globl vm_adv_rsa_pub_final\n.globl vm_adv_rsa_pub_final_end\nvm_adv_rsa_pub_final:\n.word \\\n";
      print "\nvm_adv_rsa_pub_final_end:\n.word 0\n";
    }
   }


    if(defined $key_count)
    {
      {
        print ".data\n.globl key_count\n.globl key_count_end\nkey_count:\n.word \\\n";
        @a = map chr, split //, $key_count;
        printf "0x%08x", $key_count;
      }
      print "\nkey_count_end:\n.word 0\n";
    }
    else
    {
      print ".data\n.globl key_count\n.globl key_count_end\nkey_count:\n.word \\\n";
      print "\nkey_count_end:\n.word 0\n";
    }
}
else
{
    print "binary image file need!! \n";
}
